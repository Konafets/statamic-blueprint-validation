{
  "title": "A Statamic Blueprint JSON Schema",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": [
    "sections"
  ],
  "properties": {
    "title": {
      "type": "string"
    },
    "sections": {
      "title": "The Sections",
      "description": "At its most basic, a blueprint has sections. A section has a handle, a display name, and an array of fields:",
      "type": "object",
      "minItems": 1,
      "additionalProperties": false,
      "patternProperties": {
        "^[A-Za-z]+?$": {
          "type": "object",
          "description": "The handle (name) of a section. This one is on you.",
          "required": [
            "display",
            "fields"
          ],
          "properties": {
            "display": {
              "type": "string",
              "description": "The displayed text."
            },
            "fields": {
              "type": "array",
              "description": "Here you define the fields of this section.",
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "handle"
                ],
                "properties": {
                  "handle": {
                    "type": "string",
                    "description": "The field's template variable."
                  },
                  "config": {
                    "type": "object",
                    "properties": {
                      "display": {
                        "type": "string"
                      }
                    }
                  },
                  "field": {
                    "description": "The definition of a single field.",
                    "type": "object",
                    "anyOf": [
                      {
                        "$ref": "#/$defs/array"
                      },
                      {
                        "$ref": "#/$defs/assets"
                      },
                      {
                        "$ref": "#/$defs/bard"
                      },
                      {
                        "$ref": "#/$defs/button_group"
                      },
                      {
                        "$ref": "#/$defs/checkboxes"
                      },
                      {
                        "$ref": "#/$defs/code"
                      },
                      {
                        "$ref": "#/$defs/collections"
                      },
                      {
                        "$ref": "#/$defs/color"
                      },
                      {
                        "$ref": "#/$defs/form"
                      },
                      {
                        "$ref": "#/$defs/grid"
                      },
                      {
                        "$ref": "#/$defs/date"
                      },
                      {
                        "$ref": "#/$defs/hidden"
                      },
                      {
                        "$ref": "#/$defs/html"
                      },
                      {
                        "$ref": "#/$defs/integer"
                      },
                      {
                        "$ref": "#/$defs/link"
                      },
                      {
                        "$ref": "#/$defs/list"
                      },
                      {
                        "$ref": "#/$defs/markdown"
                      },
                      {
                        "$ref": "#/$defs/radio"
                      },
                      {
                        "$ref": "#/$defs/range"
                      },
                      {
                        "$ref": "#/$defs/replicator"
                      },
                      {
                        "$ref": "#/$defs/revealer"
                      },
                      {
                        "$ref": "#/$defs/section"
                      },
                      {
                        "$ref": "#/$defs/select"
                      },
                      {
                        "$ref": "#/$defs/sites"
                      },
                      {
                        "$ref": "#/$defs/slug"
                      },
                      {
                        "$ref": "#/$defs/structures"
                      },
                      {
                        "$ref": "#/$defs/table"
                      },
                      {
                        "$ref": "#/$defs/taxonomies"
                      },
                      {
                        "$ref": "#/$defs/taggable"
                      },
                      {
                        "$ref": "#/$defs/template"
                      },
                      {
                        "$ref": "#/$defs/terms"
                      },
                      {
                        "$ref": "#/$defs/text"
                      },
                      {
                        "$ref": "#/$defs/textarea"
                      },
                      {
                        "$ref": "#/$defs/time"
                      },
                      {
                        "$ref": "#/$defs/toggle"
                      },
                      {
                        "$ref": "#/$defs/user_groups"
                      },
                      {
                        "$ref": "#/$defs/user_roles"
                      },
                      {
                        "$ref": "#/$defs/users"
                      },
                      {
                        "$ref": "#/$defs/video"
                      },
                      {
                        "$ref": "#/$defs/yaml"
                      }
                    ],
                    "required": [
                      "type"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "$defs": {
    "array": {
      "type": "object",
      "properties": {
        "display": {
          "$ref": "#/$defs/display"
        },
        "icon": {
          "$ref": "#/$defs/icon"
        },
        "instructions": {
          "$ref": "#/$defs/instructions"
        },
        "instructions_position": {
          "$ref": "#/$defs/instructions_position"
        },
        "listable": {
          "$ref": "#/$defs/listable"
        },
        "required": {
          "$ref": "#/$defs/required"
        },
        "localizable": {
          "$ref": "#/$defs/localizable"
        },
        "validate": {
          "$ref": "#/$defs/validate"
        },
        "type": {
          "const": "array"
        },
        "mode": {
          "type": "string",
          "enum": ["dynamic", "keyed"]
        },
        "keys": {
          "type": ["object", "array"]
        },
        "value_header": {
          "type": "string"
        },
        "key_header": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "assets": {
      "type": "object",
      "properties": {
        "type": {
          "const": "assets"
        }
      }
    },
    "bard": {
      "type": "object",
      "properties": {
        "type": {
          "const": "bard"
        },
        "display": {
          "$ref": "#/$defs/display"
        },
        "instructions": {
          "$ref": "#/$defs/instructions"
        },
        "instructions_position": {
          "$ref": "#/$defs/instructions_position"
        },
        "listable": {
          "$ref": "#/$defs/listable"
        },
        "required": {
          "$ref": "#/$defs/required"
        },
        "localizable": {
          "$ref": "#/$defs/localizable"
        },
        "validate": {
          "$ref": "#/$defs/validate"
        }
      }
    },
    "button_group": {
      "type": "object",
      "properties": {
        "type": {
          "const": "button_group"
        }
      }
    },
    "checkboxes": {
      "type": "object",
      "properties": {
        "type": {
          "const": "checkboxes"
        }
      }
    },
    "code": {
      "type": "object",
      "properties": {
        "type": {
          "const": "code"
        }
      }
    },
    "collections": {
      "description": "This fieldtype is used to view and select from a list of Collections.",
      "type": "object",
      "properties": {
        "type": {
          "const": "collections"
        },
        "max_items": {
          "description": "Set a maximum number of selectable items.",
          "type": "integer"
        },
        "mode": {
          "description": "Choose your preferred UI style.",
          "$ref": "#/$defs/userSelectModes"
        }
      }
    },
    "color": {
      "type": "object",
      "properties": {
        "type": {
          "const": "color"
        },
        "swatches": {
          "description": "Pre-define colors that can be selected from a list. Supports all color mode formats.",
          "type": "array"
        },
        "theme": {
          "description": "Choose between a classic and a simpler nano (mini) theme. Default: classic.",
          "type": "string",
          "enum": [
            "classic",
            "nano"
          ]
        },
        "lock_opacity": {
          "description": "Disables the alpha slider, preventing adjustments to opacity.",
          "type": "boolean",
          "default": false
        },
        "default_color_mode": {
          "description": "Set which color mode you wish to be the default. Default: hex.",
          "type": "string",
          "default": "HEXA",
          "enum": [
            "HEXA",
            "RGBA",
            "HSLA",
            "HSVA",
            "CMYK"
          ]
        },
        "color_modes": {
          "description": "Choose which color modes you want to enable in the UI. Available choices: hex, rgba, hsla, hsva, and cmyk. Default: hex.",
          "type": "array",
          "uniqueItems": true,
          "default": "hex",
          "items": {
            "type": "string",
            "enum": [
              "hex",
              "rgba",
              "hsla",
              "hsva",
              "cmyk"
            ]
          }
        }
      }
    },
    "form": {
      "type": "object",
      "properties": {
        "type": {
          "const": "form"
        },
        "placeholder": {
          "$ref": "#/$defs/placeholder"
        },
        "max_items": {
          "type": "integer",
          "default": 1
        }
      }
    },
    "grid": {
      "type": "object",
      "properties": {
        "type": {
          "const": "grid"
        },
        "fields": {
          "description": "A list of fields, each of which create their own column.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "mode": {
          "description": "The Grid is displayed as a table by default. If you have a large number of columns it can get pretty crowded. Choose stacked mode to group rows similar to Replicator. When Sneak Peek is enabled, Grids automatically toggle into stacked mode.",
          "type": "string",
          "enum": [
            "table",
            "stacked"
          ]
        },
        "min_rows": {
          "description": "The minimum number of required rows.",
          "type": "integer",
          "minimum": 0
        },
        "max_rows": {
          "description": "The maximum number of rows allowed. Once reached the Add Row button will disappear.",
          "type": "integer",
          "minimum": 1
        },
        "add_row": {
          "description": "The Add Row button's label.",
          "type": "string",
          "minimum": 1
        },
        "reorderable": {
          "description": "The minimum number of required rows.",
          "type": "boolean",
          "default": true
        }
      }
    },
    "date": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "integer",
          "description": "Show multiple months at one time, in columns and rows. Default: 1.",
          "minimum": 1,
          "default": 1
        },
        "earliest_date": {
          "oneOf": [
            {
              "format": "date"
            },
            {
              "format": "date-time"
            }
          ],
          "type": "string",
          "default": "1900-01-01",
          "description": "Set the earliest selectable date in YYYY-MM-DD format."
        },
        "format": {
          "type": "string",
          "description": "How the date should be stored, using the PHP date format. Default: 'Y-m-d' or 'Y-m-d H:m'",
          "default": "'Y-m-d'"
        },
        "full_width": {
          "type": "boolean",
          "description": "Enable to stretch the calendar out like Stretch Armstrong, using the maximum amount of available horizontal space. Default: false",
          "default": false
        },
        "icon": {
          "type": "string"
        },
        "inline": {
          "type": "boolean",
          "description": "Always show the calendar instead of the text input and dropdown UI. Default: false.",
          "default": false
        },
        "mode": {
          "type": "string",
          "description": "Choose between single or range. Range mode disables the time picker. Default: single.",
          "enum": [
            "single",
            "range"
          ],
          "default": "single"
        },
        "rows": {
          "type": "integer",
          "description": "Show multiple months at one time, in columns and rows. Default: 1.",
          "minimum": 1,
          "default": 1
        },
        "time_enabled": {
          "type": "boolean",
          "description": "Enable/disable the timepicker. Default: false.",
          "default": false
        },
        "time_required": {
          "type": "boolean",
          "description": "Makes the time field visible and non-dismissible. Default: false.",
          "default": false
        },
        "type": {
          "type": "string",
          "const": "date"
        }
      }
    },
    "hidden": {
      "type": "object",
      "properties": {
        "type": {
          "const": "hidden"
        },
        "default": {
          "type": "string"
        }
      }
    },
    "html": {
      "type": "object",
      "properties": {
        "type": {
          "const": "html"
        },
        "html": {
          "description": "Store whatever HTML you want — it's up to you.",
          "type": ["string"]
        }
      }
    },
    "integer": {
      "type": "object",
      "properties": {
        "type": {
          "const": "integer"
        },
        "default": {
          "type": ["string", "integer"]
        }
      }
    },
    "link": {
      "type": "object",
      "properties": {
        "type": {
          "const": "link"
        },
        "collections": {
          "type": "array"
        }
      }
    },
    "list": {
      "type": "object",
      "properties": {
        "type": {
          "const": "list"
        },
        "default": {
          "type": "array"
        }
      }
    },
    "markdown": {
      "type": "object",
      "properties": {
        "type": {
          "const": "markdown"
        },
        "container": {
          "description": "Set the name of an asset container to enable browsing, uploading, and inserting assets.",
          "type": "string"
        },
        "restrict": {
          "description": "If true, navigation within the asset browser will be disabled. Your users will be restricted to specified the container and folder. Default: false.",
          "type": "boolean",
          "default": false
        },
        "automatic_line_breaks": {
          "description": "Automatically convert line breaks to <br> tags. Default: true.",
          "type": "boolean",
          "default": true
        },
        "automatic_links": {
          "description": "Automatically links any URLs in the text. Default: false.",
          "type": "boolean",
          "default": false
        },
        "escape_markup": {
          "description": "Escapes inline HTML markup. For example, <div> will be replaced with &lt;div&gt;. Default: true.",
          "type": "boolean",
          "default": false
        },
        "smartypants": {
          "description": "Automatically convert straight quotes into curly quotes, dashes into en/em-dashes, and other similar text transformations. Default: false.",
          "type": "boolean",
          "default": false
        },
        "antlers": {
          "$ref": "#/$defs/antlers"
        },
        "default": {
          "description": "Set the default value.",
          "type": "string"
        }
      }
    },
    "radio": {
      "type": "object",
      "properties": {
        "type": {
          "const": "radio"
        },
        "options": {
          "description": "Sets of key/value pairs define the values and labels of the radio options.",
          "type": ["object", "array"]
        },
        "inline": {
          "description": "Show the radio buttons next to each other in a row instead of stacked vertically. Default: false",
          "type": "boolean",
          "default": false
        },
        "cast_booleans": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "range": {
      "type": "object",
      "properties": {
        "type": {
          "const": "range"
        },
        "step": {
          "description": "The minimum size between values.",
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "min": {
          "description": "The minimum, left-most value.",
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "max": {
          "description": "The maximum, right-most value.",
          "type": "integer",
          "default": 100
        },
        "default": {
          "description": "Set the default value.",
          "type": "integer"
        }
      }
    },
    "replicator": {
      "type": "object",
      "properties": {
        "type": {
          "const": "replicator"
        }
      }
    },
    "revealer": {
      "description": "The revealer is a simple button that reveals conditional fields without saving any additional data.",
      "type": "object",
      "properties": {
        "type": {
          "const": "revealer"
        }
      }
    },
    "section": {
      "type": "object",
      "properties": {
        "type": {
          "const": "section"
        }
      }
    },
    "select": {
      "type": "object",
      "properties": {
        "type": {
          "const": "select"
        },
        "clearable": {
          "description": "Allow deselecting any chosen option and making null a possible value. Default: false.",
          "type": "boolean",
          "default": false
        },
        "options": {
          "description": "A set of key/value pairs that define the values and labels. If you don't define the keys, the value and label will be the same.\n\n",
          "type": ["array", "object"]
        },
        "placeholder": {
          "description": "Set the non-selectable placeholder text. Default: none.",
          "$ref": "#/$defs/placeholder"
        },
        "default": {
          "description": "Set the default option key. Default: none.",
          "type": "string"
        },
        "multiple": {
          "description": "Allow multiple selections. Default: false.",
          "type": "boolean",
          "default": false
        },
        "searchable": {
          "description": "Enable search with suggestions by typing in the select box. Default: true.",
          "type": "boolean",
          "default": true
        },
        "taggable": {
          "description": "Use a \"tag\" style UI when selecting multiples. Default: false.",
          "type": "boolean",
          "default": false
        },
        "push_tags": {
          "description": "Add newly created options to the list. Default: false.",
          "type": "boolean",
          "default": false
        }
      },
      "required": ["options"]
    },
    "sites": {
      "type": "object",
      "properties": {
        "type": {
          "const": "sites"
        },
        "max_items": {
          "$ref": "#/$defs/max_items"
        },
        "mode": {
          "$ref": "#/$defs/userSelectModes"
        }
      }
    },
    "slug": {
      "type": "object",
      "properties": {
        "type": {
          "const": "slug"
        },
        "generate": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "structures": {
      "type": "object",
      "properties": {
        "type": {
          "const": "structures"
        },
        "max_items": {
          "$ref": "#/$defs/max_items"
        },
        "mode": {
          "$ref": "#/$defs/userSelectModes"
        }
      }
    },
    "table": {
      "type": "object",
      "properties": {
        "type": {
          "const": "table"
        }
      }
    },
    "taggable": {
      "type": "object",
      "properties": {
        "type": {
          "const": "taggable"
        },
        "placeholder": {
          "$ref": "#/$defs/placeholder"
        }
      }
    },
    "taxonomies": {
      "type": "object",
      "properties": {
        "type": {
          "const": "taxonomies"
        },
        "max_items": {
          "$ref": "#/$defs/max_items"
        },
        "mode": {
          "$ref": "#/$defs/userSelectModes"
        }
      }
    },
    "template": {
      "type": "object",
      "properties": {
        "type": {
          "const": "template"
        },
        "hide_partials": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "terms": {
      "type": "object",
      "properties": {
        "type": {
          "const": "terms"
        },
        "max_items": {
          "$ref": "#/$defs/max_items"
        },
        "mode": {
          "$ref": "#/$defs/userSelectModes"
        },
        "create": {
          "type": "boolean"
        },
        "taxonomies": {
          "type": "array"
        }
      }
    },
    "text": {
      "type": "object",
      "properties": {
        "type": {
          "const": "text"
        },
        "placeholder": {
          "$ref": "#/$defs/placeholder"
        },
        "input_type": {
          "type": "string",
          "default": "text",
          "enum": [
            "color",
            "date",
            "email",
            "hidden",
            "month",
            "number",
            "password",
            "tel",
            "text",
            "time",
            "url",
            "week"
          ]
        },
        "character_limit": {
          "type": ["integer"]
        },
        "antlers": {
          "$ref": "#/$defs/antlers"
        },
        "default": {
          "type": "string"
        },
        "append": {
          "type": "string"
        },
        "prepend": {
          "type": "string"
        }
      }
    },
    "textarea": {
      "type": "object",
      "properties": {
        "type": {
          "const": "textarea"
        },
        "placeholder": {
          "$ref": "#/$defs/placeholder"
        },
        "character_limit": {
          "type": ["integer", "string"]
        },
        "antlers": {
          "$ref": "#/$defs/antlers"
        },
        "default": {
          "type": "string"
        }
      }
    },
    "time": {
      "type": "object",
      "properties": {
        "type": {
          "const": "time"
        },
        "default": {
          "type": "string",
          "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$"
        }
      }
    },
    "toggle": {
      "type": "object",
      "properties": {
        "type": {
          "const": "toggle"
        },
        "default": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "user_groups": {
      "type": "object",
      "properties": {
        "type": {
          "const": "user_groups"
        },
        "max_items": {
          "type": ["integer", "null"],
          "minimum": 1,
          "default": null
        },
        "mode": {
          "$ref": "#/$defs/userSelectModes"
        }
      }
    },
    "user_roles": {
      "type": "object",
      "properties": {
        "type": {
          "const": "user_roles"
        },
        "max_items": {
          "type": ["integer", "null"],
          "minimum": 1,
          "default": null
        },
        "mode": {
          "$ref": "#/$defs/userSelectModes"
        }
      }
    },
    "users": {
      "type": "object",
      "properties": {
        "type": {
          "const": "users"
        },
        "max_items": {
          "type": ["integer", "null"],
          "minimum": 1,
          "default": null
        },
        "mode": {
          "$ref": "#/$defs/userSelectModes"
        },
        "default": {
          "type": "string",
          "const": "current"
        }
      }
    },
    "video": {
      "type": "object",
      "properties": {
        "type": {
          "const": "video"
        },
        "placeholder": {
          "$ref": "#/$defs/placeholder"
        },
        "default": {
          "type": "string",
          "format": "url"
        }
      },
      "additionalProperties": false
    },
    "yaml": {
      "type": "object",
      "properties": {
        "type": {
          "const": "yaml"
        },
        "default": {
          "type": ["object", "string"]
        }
      }
    },
    "display": {
      "description": "The label shown above the field.",
      "type": "string"
    },
    "icon": {
      "description": "The icon",
      "type": "string"
    },
    "instructions": {
      "description": "Shown under the field's display label, like this very text. Markdown is supported.",
      "type": "string"
    },
    "instructions_position": {
      "description": "Where the instructions should be positioned relative to the field. Options: Above or Below.",
      "type": "string",
      "enum": [
        "above",
        "below"
      ]
    },
    "listable": {
      "description": "Controls whether the field should be shown in control panel listings.",
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "type": "string",
          "pattern": "hidden"
        }
      ]
    },
    "required": {
      "description": "Control whether or not this field is required.\n\n",
      "type": "boolean"
    },
    "localizable": {
      "description": "",
      "type": "boolean"
    },
    "validate": {
      "description": "The validation rules for that field",
      "type": "array",
      "items": {
        "anyOf": [
          {
            "$ref": "#/$defs/ruleMin"
          },
          {
            "$ref": "#/$defs/validationRules"
          }
        ],
        "minItems": 1,
        "uniqueItems": true
      }
    },
    "ruleMin": {
      "type": "string",
      "pattern": "^((accepted|declined|exclude)_if:\\S+,\\S+|(after|before):[\\w\\d_-]+|(after|before)_or_equal:[\\w\\d_-]+|between:\\d+,\\d+|date_equals:[\\w\\d_-]+|date_format:[\\w\\d_-]+|different:\\S+|digits:\\d+|digits_between:\\d+,\\d+|ends_with:\\S+,\\S+|exclude_unless:\\S+,\\S+|exclude_without:\\S+|exists:\\S+,\\S+|[lg]t(e)?:\\S+|in:\\S+,\\S+|in_array:\\S+|(min|max):\\d+|mimetypes:\\S+|mimes:\\S+|multiple_of:\\d+|not_in:\\S+,\\S+|(not_)?regex:\\S+|prohibited_(if|unless):[\\S_]+,\\S+|prohibits:(\\S)+,(\\S)+|required_(if|unless):\\S+,\\d+|required_(with|with_all|without|without_all):\\S+,\\S+|same:\\S+|size:\\d+|starts_with:\\S+,\\S+|unique:\\S+,\\S+|unique_user_value:[\\{(collection|id|site)\\}]+)$"
    },
    "validationRules": {
      "type": "string",
      "enum": [
        "accepted",
        "active_url",
        "required",
        "alpha",
        "alpha_dash",
        "alpha_num",
        "array",
        "bail",
        "boolean",
        "confirmed",
        "current_password",
        "date",
        "declined",
        "dimensions",
        "distinct",
        "email",
        "enum",
        "exclude",
        "file",
        "filled",
        "image",
        "integer",
        "ip",
        "ipv4",
        "ipv6",
        "json",
        "nullable",
        "numeric",
        "password",
        "present",
        "prohibited",
        "string",
        "timezone",
        "url",
        "uuid"
      ]
    },
    "userSelectModes": {
      "type": "string",
      "enum": [
        "default",
        "select",
        "typeahead"
      ]
    },
    "placeholder": {
      "type": "string"
    },
    "antlers": {
      "description": "Enable Antlers parsing in this field's content.",
      "type": "boolean",
      "default": false
    },
    "max_items": {
      "type": "integer",
      "minimum": 1
    }
  }
}
